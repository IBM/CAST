/*================================================================================

    csmi/include/csm_types/struct_defs/wm/csmi_allocation_mcast_context.def

  Â© Copyright IBM Corporation 2015-2017. All Rights Reserved

    This program is licensed under the terms of the Eclipse Public License
    v1.0 as published by the Eclipse Foundation and available at
    http://www.eclipse.org/legal/epl-v10.html

    U.S. Government Users Restricted Rights:  Use, duplication or disclosure
    restricted by GSA ADP Schedule Contract with IBM Corp.

================================================================================*/

/** 
 * CSMI_INTERNAL


 * CSMI_COMMENT
 * @brief Defines a context object for an allocation.
 */

#ifndef CSMI_STRUCT_NAME
    #define CSMI_STRUCT_NAME csmi_allocation_mcast_context_t
    
    #undef CSMI_BASIC              
    #undef CSMI_STRING             
    #undef CSMI_STRING_FIXED       
    #undef CSMI_ARRAY              
    #undef CSMI_ARRAY_FIXED        
    #undef CSMI_ARRAY_STR          
    #undef CSMI_ARRAY_STR_FIXED    
    #undef CSMI_STRUCT             
    #undef CSMI_ARRAY_STRUCT       
    #undef CSMI_ARRAY_STRUCT_FIXED 
    #undef CSMI_NONE  
    
    #define CSMI_BASIC               1
    #define CSMI_STRING              1
    #define CSMI_STRING_FIXED        0
    #define CSMI_ARRAY               1 
    #define CSMI_ARRAY_FIXED         0
    #define CSMI_ARRAY_STR           1
    #define CSMI_ARRAY_STR_FIXED     0
    #define CSMI_STRUCT              0
    #define CSMI_ARRAY_STRUCT        1
    #define CSMI_ARRAY_STRUCT_FIXED  0
    #define CSMI_NONE                0
#endif 

// CSMI_STRUCT_MEMBER(type, name, serial_type, length_member, init_value, extra ) /**< comment */
CSMI_VERSION_START(CSM_VERSION_1_0_0)

CSMI_STRUCT_MEMBER(int64_t,  allocation_id,        BASIC,  ,    0, ) /**< The unique identifier for the allocation. */
CSMI_STRUCT_MEMBER(int64_t,  primary_job_id,       BASIC,  ,    0, ) /**< Primary job id (for LSF this will be the LSF job ID). */
CSMI_STRUCT_MEMBER(int32_t,  num_processors,       BASIC, , -1, ) /**< Number of processors for use in the allocation (required). */
CSMI_STRUCT_MEMBER(int32_t,  num_gpus,             BASIC, , -1, ) /**< Number of gpus to be used for the node (optional). */
CSMI_STRUCT_MEMBER(int32_t,  projected_memory,     BASIC, , -1, ) /**< Projected memory usage on the node for the allocation. */
CSMI_STRUCT_MEMBER(int32_t,  secondary_job_id,     BASIC,  ,    0, ) /**< Secondary job id (for LSF this will be the LSF job index for job arrays). */
CSMI_STRUCT_MEMBER(int32_t,  isolated_cores,       BASIC,  ,    0, ) /**< Specifies the number of cores to isolate in the system cgroup, 0 indicates no core isolation. */
CSMI_STRUCT_MEMBER(uint32_t, num_nodes,            BASIC,  ,    0, ) /**< Number of nodes, size of @ref compute_nodes. */
CSMI_STRUCT_MEMBER(csmi_state_t          , state      , BASIC,, CSM_FAILED,       ) /**< State of allocation, refer to @ref csmi_state_t for details. */
CSMI_STRUCT_MEMBER(csmi_allocation_type_t, type       , BASIC,, CSM_USER_MANAGED, ) /**< Type of allocation, refer to @ref csmi_allocation_type_t for details. */
CSMI_STRUCT_MEMBER(int64_t*, ib_rx               , ARRAY,  num_nodes, NULL, int64_t ) /**< Count of Data Octets received on all Infiniband ports. ( multiply by 4 for bytes ).*/  
CSMI_STRUCT_MEMBER(int64_t*, ib_tx               , ARRAY,  num_nodes, NULL, int64_t ) /**< Count of Data Octets transmitted on all Infiniband ports. ( multiply by 4 for bytes ).*/  
CSMI_STRUCT_MEMBER(int64_t*, gpfs_read           , ARRAY,  num_nodes, NULL, int64_t ) /**< Counter for number of bytes read over network via gpfs. */  
CSMI_STRUCT_MEMBER(int64_t*, gpfs_write          , ARRAY,  num_nodes, NULL, int64_t ) /**< Counter for number of bytes written over network via gpfs. */  
CSMI_STRUCT_MEMBER(int64_t*, energy              , ARRAY,  num_nodes, NULL, int64_t ) /**< The energy usage of the node. */ 
CSMI_STRUCT_MEMBER(int64_t*, gpu_usage           , ARRAY,  num_nodes, NULL, int64_t ) /**< The gpu usage in microseconds. */
CSMI_STRUCT_MEMBER(int64_t*, cpu_usage           , ARRAY,  num_nodes, NULL, int64_t ) /**< The cpu usage in nanoseconds. */
CSMI_STRUCT_MEMBER(int64_t*, memory_max          , ARRAY,  num_nodes, NULL, int64_t ) /**< The maximum memory usage in bytes/ */
CSMI_STRUCT_MEMBER(int64_t*, power_cap_hit       , ARRAY,  num_nodes, NULL, int64_t ) /**< The total power cap hit value for the run of the allocation. */
CSMI_STRUCT_MEMBER(int32_t*, power_cap           , ARRAY,  num_nodes, NULL, int32_t ) /**< The maximum power draw for the node - measured in watts. */
CSMI_STRUCT_MEMBER(int32_t*, ps_ratio            , ARRAY,  num_nodes, NULL, int32_t ) /**< The power shift ratio of the node. */
CSMI_STRUCT_MEMBER(csm_bool, shared              , BASIC,  , CSM_FALSE,       ) /**< Flag for creating a shared allocation.*/
CSMI_STRUCT_MEMBER(char,     save_allocation,      BASIC,  ,    1, ) /**< Flag that specifies whether the allocation should be saved in the database. */
CSMI_STRUCT_MEMBER(char**  , compute_nodes,      ARRAY_STR, num_nodes, NULL,        ) /**< List of nodes that participated in the allocation, size stored in @ref num_nodes. */
CSMI_STRUCT_MEMBER(char*,    user_flags,           STRING, , NULL, ) /**< User flags for the epilog/prolog. */
CSMI_STRUCT_MEMBER(char*,    system_flags,         STRING, , NULL, ) /**< System flags for the epilog/prolog. */
CSMI_STRUCT_MEMBER(char*,    user_name           , STRING, , NULL, ) /**< User name of allocation owner. */
CSMI_STRUCT_MEMBER(int64_t*, gpu_energy           , ARRAY,  num_nodes, NULL, int64_t ) /**< The gpu energy .*/
CSMI_VERSION_END(a76588b6cb8f7f4b75d09b7744e27dfc)

CSMI_VERSION_START(CSM_VERSION_1_3_0)
CSMI_STRUCT_MEMBER(char*, timestamp, STRING, ,NULL,) /**< A Timestamp for tracking miscellaneous timestamps. */
CSMI_STRUCT_MEMBER(csmi_state_t, start_state, BASIC,, CSM_FAILED,) /**< State of allocation at the start of the , refer to @ref csmi_state_t for details. */
CSMI_VERSION_END(79b40014609c05f907072fe513ccc353)
CSMI_VERSION_START(CSM_VERSION_1_4_0)
CSMI_STRUCT_MEMBER(int64_t, runtime, BASIC, ,  0, ) /**< The run time of the allocation so far. */
CSMI_VERSION_END(e4f1ae37acc979f5737b304e2a3b1a4b)

CSMI_VERSION_START(CSM_VERSION_1_4_0)
CSMI_STRUCT_MEMBER(csmi_allocation_gpu_metrics_t**, gpu_metrics, ARRAY_STRUCT, num_nodes, NULL, csmi_allocation_gpu_metrics_t ) /**< Detailed gpu metrics for each node */
CSMI_VERSION_END(3499cc33b2a83b231e2166374f7f97d4)

#undef CSMI_VERSION_START
#undef CSMI_VERSION_END
#undef CSMI_STRUCT_MEMBER

